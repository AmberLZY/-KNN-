#coding:utf-8
import sys
import numpy as np
import os
import gzip
from six.moves import urllib
import operator
from datetime import datetime

SOURCE_URL = 'http://yann.lecun.com/exdb/mnist/'
TRAIN_IMAGES = 'train-images-idx3-ubyte.gz'
TRAIN_LABELS = 'train-labels-idx1-ubyte.gz'
TEST_IMAGES = 't10k-images-idx3-ubyte.gz'
TEST_LABELS = 't10k-labels-idx1-ubyte.gz'

#下载mnist数据集，仿照tensorflow的base.py中的写法。
def maybe_download(filename, path, source_url):
    if not os.path.exists(path):
        os.makedirs(path)
    filepath = os.path.join(path, filename)
    if not os.path.exists(filepath):
        urllib.request.urlretrieve(source_url, filepath)
    return filepath

#按32位读取，主要为读校验码、图片数量、尺寸准备的
#仿照tensorflow的mnist.py写的。
def _read32(bytestream):
    dt = np.dtype(np.uint32).newbyteorder('>')
    return np.frombuffer(bytestream.read(4), dtype=dt)[0]

#抽取图片，并按照需求，可将图片中的灰度值二值化，按照需求，可将二值化后的数据存成矩阵或者张量
#仿照tensorflow中mnist.py写的
def extract_images(input_file, is_value_binary, is_matrix):
    with gzip.open(input_file, 'rb') as zipf:
        magic = _read32(zipf)
        if magic !=2051:
            raise ValueError('Invalid magic number %d in MNIST image file: %s' %(magic, input_file.name))
        num_images = _read32(zipf)
        rows = _read32(zipf)
        cols = _read32(zipf)
        print (magic, num_images, rows, cols)
        buf = zipf.read(rows * cols * num_images)
        data = np.frombuffer(buf, dtype=np.uint8)
        if is_matrix:
            data = data.reshape(num_images, rows*cols)
        else:
            data = data.reshape(num_images, rows, cols)
        if is_value_binary:
            return np.minimum(data, 1) #取对应位置上的最小值
        else:
            return data


#抽取标签
#仿照tensorflow中mnist.py写的
def extract_labels(input_file):
    with gzip.open(input_file, 'rb') as zipf:
        magic = _read32(zipf)
        if magic != 2049:
            raise ValueError('Invalid magic number %d in MNIST label file: %s' % (magic, input_file.name))
        num_items = _read32(zipf)
        buf = zipf.read(num_items)
        labels = np.frombuffer(buf, dtype=np.uint8)
        return labels

# 一般的knn分类，跟全部数据同时计算一般距离，然后找出最小距离的k张图，并找出这k张图片的标签，标签占比最大的为newInput的label
def kNNClassify(newInput, dataSet, labels, k):
    numSamples = dataSet.shape[0] # shape[0] 训练数据的行数，即样本数量
    init_shape = newInput.shape[0]
    newInput = newInput.reshape(1, init_shape) # 变成一维向量

    diff = np.tile(newInput, (numSamples, 1)) - dataSet # 差
    squaredDiff = diff ** 2 # 差的平方
    squaredDist = np.sum(squaredDiff, axis = 1) # 差的平方和
    distance = squaredDist ** 0.5 # 平方根，算得欧氏距离
    sortedDistIndices = np.argsort(distance) # 从小到大排序

    classCount = {} # 字典
    for i in range(k): # 获取前k个数据的标签，统计各标签数量
        voteLabel = labels[sortedDistIndices[i]]
        classCount[voteLabel] = classCount.get(voteLabel, 0) + 1  

    maxCount = 0
    maxIndex = 0 
    for key, value in classCount.items(): # 找出数量最多的标签
        if value > maxCount:
            maxCount = value
            maxIndex = key
    # sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True)
    # iteritems()用于返回本身字典列表操作后的迭代器，该方法在python3.x版本中废除
    return maxIndex


maybe_download('train_images', 'data/mnist', SOURCE_URL+TRAIN_IMAGES)
maybe_download('train_labels', 'data/mnist', SOURCE_URL+TRAIN_LABELS)
maybe_download('test_images', 'data/mnist', SOURCE_URL+TEST_IMAGES)
maybe_download('test_labels', 'data/mnist', SOURCE_URL+TEST_LABELS)



# 主函数，先读图片，然后用于测试手写数字
def testHandWritingClass():
    # 加载
    train_x = extract_images('data/mnist/train_images', True, True)
    train_y = extract_labels('data/mnist/train_labels')
    test_x = extract_images('data/mnist/test_images', True, True)
    test_y = extract_labels('data/mnist/test_labels')

    # 测试
    begin = datetime.now()
    numTestSamples = test_x.shape[0] 
    matchCount = 0 #符合标签的数量
    test_num = numTestSamples//10
    for i in range(test_num):
        predict = kNNClassify(test_x[i], train_x, train_y, 3)
        if predict == test_y[i]: # 标签符合
            matchCount += 1
        if i % 100 == 0:
            print (("完成%d张图片")%(i))
    accuracy = float(matchCount) / test_num
    end = datetime.now()
    print (("一共运行了%d秒")%((end-begin).seconds))

    # 结果
    print (('KNN 准确率: %.2f%%') % (accuracy * 100))

if __name__ == '__main__':
    testHandWritingClass()
